		Extensions:
		==========
	==>		As you may know, PostgreSQL is designed for extensibility and customization, this means that we can extend the functionality of your database using extensions.
	==>		The contrib directory shipped with the source code contains several extensions.
	
Advantages:
==========
	==>		Easy to extend the PostgreSQL functionality
	==>		Very easy to create and install the extension
	==>		Easy to test for regressions on different versions of PostgreSQL

Con's
=====
There is no special cons but test the feature you are adding in the extension before you use it.

syntax tocreate extension
========================
CREATE EXTENSION EXTENSION_NAME;

exaples:

1,postgres_fdw-->
2.oracle_fdw
pg_buffercache;


Example:PG_STAT_STATEMENTS
==========================
	==>		The pg_stat_statements module provides a means for tracking execution statistics of all SQL statements executed by a server.
	==>		The module must be loaded by adding pg_stat_statements to shared_preload_libraries in postgresql.conf, because it requires additional shared memory. 
	==>		The statistics gathered by the module are made available via a system view named pg_stat_statements
	==>		This view contains one row for each distinct database ID, user ID and query ID (up to the maximum number of distinct statements that the module can track).
	
Name				Type		References				Description

userid				oid			pg_authid.oid			OID of user who executed the statement
dbid				oid			pg_database.oid			OID of database in which the statement was executed
queryid				bigint	 						Internal hash code, computed from the statement's parse tree
query				text	 						Text of a representative statement
calls				bigint	 						Number of times executed
total_time			double 		precision	 			Total time spent in the statement, in milliseconds
rows				bigint	 						Total number of rows retrieved or affected by the statement
shared_blks_hit		bigint	 							Total number of shared block cache hits by the statement
shared_blks_read	bigint	 							Total number of shared blocks read by the statement
shared_blks_dirtied	bigint	 							Total number of shared blocks dirtied by the statement
shared_blks_written	bigint	 							Total number of shared blocks written by the statement
local_blks_hit		bigint	 							Total number of local block cache hits by the statement
local_blks_read		bigint	 							Total number of local blocks read by the statement
local_blks_dirtied	bigint	 							Total number of local blocks dirtied by the statement
local_blks_written	bigint	 							Total number of local blocks written by the statement
temp_blks_read		bigint	 							Total number of temp blocks read by the statement
temp_blks_written	bigint	 							Total number of temp blocks written by the statement
blk_read_time		double 		precision	 			Total time the statement spent reading blocks, in milliseconds (if track_io_timing is enabled, otherwise zero)
blk_write_time		double 		precision	 			Total time the statement spent writing blocks, in milliseconds (if track_io_timing is enabled, otherwise zero)




Install contrib modules:
======================
	==>	NOTE:First install the postgres11 version via source code method
	==>	Verify weather the contrib modules are installd or not?

[root@postgres11m ~]# su - postgres
[postgres@postgres11m ~]$ /usr/local/pgsql/bin/psql
psql (11.0)
Type "help" for help.

postgres=# create extension pg_stat_statements;
ERROR:  could not open extension control file "/usr/local/pgsql/share/extension/pg_stat_statements.control": No such file or directory

	==>	Means contrib modules are hevn't installed.


1.Install con-trib modules:
=======================
[root@postgres11m ~]# cd /u01/postgresql-11.0/contrib

[root@postgres11m contrib]# make install

2.change the below parameter:
==========================
cd /u01/data 
vi postgresql.conf 

	shared_preload_libraries = 'pg_stat_statements'
	
save it. and restart the cluster	

3.Create Extensionpg_stat_stements
======================================
postgres=# create extension pg_stat_stements;
CREATE EXTENSION


4.verify pg_stat_stements working properly or not?
==============================================
[root@postgres11m ~]# su - postgres
[postgres@postgres11m ~]$ /usr/local/pgsql/bin/psql
psql (11.0)
Type "help" for help.


postgres=# select * from pg_stat_statements;
-[ RECORD 1 ]-------+---------------------------------
userid              | 10
dbid                | 13237
queryid             | -274266894735509228
query               | select * from pg_stat_statements
calls               | 1
total_time          | 0.056011
min_time            | 0.056011
max_time            | 0.056011
mean_time           | 0.056011
stddev_time         | 0
rows                | 0
shared_blks_hit     | 0
shared_blks_read    | 0
shared_blks_dirtied | 0
shared_blks_written | 0
local_blks_hit      | 0
local_blks_read     | 0
local_blks_dirtied  | 0
local_blks_written  | 0
temp_blks_read      | 0
temp_blks_written   | 0
blk_read_time       | 0
blk_write_time      | 0


To see the Available extension information:
===========================================

postgres=# select * from pg_extension;
      extname       | extowner | extnamespace | extrelocatable | extversion | extconfig | extcondition
--------------------+----------+--------------+----------------+------------+-----------+--------------
 plpgsql            |       10 |           11 | f              | 1.0        |           |
 pg_stat_statements |       10 |         2200 | t              | 1.6        |           |
(2 rows)

or

postgres=# \dx
                                     List of installed extensions
        Name        | Version |   Schema   |                        Description
--------------------+---------+------------+-----------------------------------------------------------
 pg_buffercache     | 1.3     | public     | examine the shared buffer cache
 pg_stat_statements | 1.6     | public     | track execution statistics of all SQL statements executed
 plpgsql            | 1.0     | pg_catalog | PL/pgSQL procedural language
(3 rows)



To drop extension :
===============

postgres=# drop extension pg_stat_statements;


Change pg_stat_statements max query count:
==========================================
By default, the pg_stat_statements extension stores statistics for the first 5,000 queries it encounters. We can change this number by editing the parameter pg_stat_statements.max. The PostgreSQL service must be restarted for the change in the parameter to take effect.

As an example, we can set it to 10000 as follows:

ALTER SYSTEM SET pg_stat_statements.max TO 10000;
1
ALTER SYSTEM SET pg_stat_statements.max TO 10000;
Reset pg_stat_statements Statistics:
Statistics obtained by pg_stat_statements accumulate until reset.

You can run the following function by connecting to the database with a user with superuser rights to reset the statistics data:

SELECT pg_stat_statements_reset();
1
SELECT pg_stat_statements_reset();
In this article I mainly mentioned the use of pg_stat_statements. For more detailed information, you can look at below link;
