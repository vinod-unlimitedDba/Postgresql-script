ENVIRONMWNT VARIABLES:
=====================
if you set up bash_profile means you can directly access your postgresql utility anywhere in a server without going to bin path.

1.PGDATA
2.PGUSR
3.PGDATABASE
4.PGPORT
5.PGHOST

we have 2 methods which is used to setup env variables in postgres.
1.pg_env.sh
2..bash_profile

step1:create pg_env.sh
=====================
su - postgres
$vi pg_env.sh
#!/bin/sh
# The script sets environment variables helpful for PostgreSQL
export PATH=/opt/PostgreSQL/9.3/bin:$PATH
export PGDATA=/opt/PostgreSQL/9.3/data
export PGDATABASE=postgres
export PGUSER=postgres
export PGPORT=5432
export PGLOCALEDIR=/opt/PostgreSQL/9.3/share/locale
export MANPATH=$MANPATH:/opt/PostgreSQL/9.3/share/man

HOW TO Execute pg_env.sh file:
==============================
$source pg_env.sh
Step 2:Copy the "pg_env" file and paste into the ".bash_profile"Like following
==============================================================================
[postgres@r1 ~]$ cat .bash_profile 
# .bash_profile
# Get the aliases and functions
if [ -f ~/.bashrc ]; then
        . ~/.bashrc
fi
# User specific environment and startup programs
 
PATH=$PATH:$HOME/bin
export PATH
export PATH=/opt/PostgreSQL/9.3/bin:$PATH
export PGDATA=/opt/PostgreSQL/9.3/data
export PGDATABASE=postgres
export PGUSER=postgres
export PGPORT=5432
export PGLOCALEDIR=/opt/PostgreSQL/9.3/share/locale
export MANPATH=$MANPATH:/opt/PostgreSQL/9.3/share/man


Step3:Step 4:Run the Bash Profile as "Postgres user"
==============================================
[postgres@r1 ~]$ . .bash_profile 

step4:Testinig for variables:
===========================
login to the vm
su - postgres
$echo $PGDATA   --it should give the data directory path.
$echo $PGUSER   --- it should give postgres user.
[postgres@oraclelinux69 ~]$ echo $PGDATA
/u01/data11/
[postgres@oraclelinux69 ~]$ echo $PGDATABASE
postgres
 [postgres@oraclelinux69 ~]$ pwd
/home/postgres
[postgres@oraclelinux69 ~]$ psql
psql (11.5)
Type "help" for help.

postgres=#

Step 5:Then you can easily connect the Postgres server using with "psql" Utility without going utility path
===========================================================================================================
[postgres@r1 ~]$ psql
Password: 
psql.bin (9.3.14)
Type "help" for help.
 
No entry for terminal type "xterm";
using dumb terminal settings.
postgres=# 
